// GET MOVIES RESULTS //
export function getMovies(listItem, card, formatDate) {
    listItem.forEach(trendingItem => {
        const row = document.createElement('tr')
        row.classList.add('main_movies_tr')

        const imageData = document.createElement('td')
        const image = document.createElement('img')
        image.src = `${IMAGE_URL + trendingItem.poster_path}`
        imageData.appendChild(image)
        row.appendChild(imageData)

        const title = document.createElement('td')
        const titleBold = document.createElement('strong')
        titleBold.textContent = trendingItem.title
        title.appendChild(titleBold)

        const date = document.createElement('td')
        if (trendingItem.release_date == '') {
            date.textContent = ''
        } else {
            const formattedDate = formatDate(trendingItem.release_date)
            date.textContent = formattedDate
        }

        row.appendChild(title)
        row.appendChild(date)
        card.appendChild(row)
    })
}
// GET MOVIES RESULTS //

// GET SERIES RESULTS //
export function getSeries(listItem, card, formatDate) {
    listItem.forEach(trendingItem => {
        const row = document.createElement('tr')
        row.classList.add('main_series_tr')

        const imageData = document.createElement('td')
        const image = document.createElement('img')
        image.src = `${IMAGE_URL + trendingItem.poster_path}`
        imageData.appendChild(image)
        row.appendChild(imageData)

        const nameItem = document.createElement('td')
        const nameBold = document.createElement('strong')
        nameBold.textContent = trendingItem.name
        nameItem.appendChild(nameBold)

        const firstAirDate = document.createElement('td')
        if (trendingItem.first_air_date == '') {
            firstAirDate.textContent = ''
        } else {
            const formattedFirstAirDate = formatDate(trendingItem.first_air_date)
            firstAirDate.textContent = formattedFirstAirDate
        }

        row.appendChild(nameItem)
        row.appendChild(firstAirDate)
        card.appendChild(row)
    })
}
// GET SERIES RESULTS //






// choose content //
    contentOptions.forEach(function (option, optionIndex) {

        option.addEventListener('click', function () {
            if (optionIndex == 0) {
                styles.changeChoiceStylesByClick(contentChoices, optionIndex)

                content_0 = true

                toolbox.hideAllSections(trendingSections)

                if (time_0) {
                    trendingSections[0].style.display = 'block'
                }
                if (time_1) {
                    trendingSections[3].style.display = 'block'
                }
            } else {
                content_0 = false
            }

            if (optionIndex == 1) {
                styles.changeChoiceStylesByClick(contentChoices, optionIndex)

                content_1 = true

                toolbox.hideAllSections(trendingSections)

                if (time_0) {
                    trendingSections[1].style.display = 'block'
                }
                if (time_1) {
                    trendingSections[4].style.display = 'block'
                }
            } else {
                content_1 = false
            }

            if (optionIndex == 2) {
                styles.changeChoiceStylesByClick(contentChoices, optionIndex)

                content_2 = true

                toolbox.hideAllSections(trendingSections)

                if (time_0) {
                    trendingSections[2].style.display = 'block'
                }
                if (time_1) {
                    trendingSections[5].style.display = 'block'
                }
            } else {
                content_2 = false
            }
        })

        option.addEventListener('mouseover', function () {
            styles.changeChoiceStylesByMouseover(contentChoices, optionIndex)
        })

        option.addEventListener('mouseout', function () {
            styles.changeChoiceStylesByMouseout(contentChoices)
        })
        
    })
    // choose content //

    // choose time //
    timeOptions.forEach(function (option, optionIndex) {

        option.addEventListener('click', function () {
            if (optionIndex == 0) {
                styles.changeChoiceStylesByClick(timeChoices, optionIndex)

                time_0 = true

                toolbox.hideAllSections(trendingSections)

                if (content_0) {
                    trendingSections[0].style.display = 'block'
                }

                if (content_1) {
                    trendingSections[1].style.display = 'block'
                }

                if (content_2) {
                    trendingSections[2].style.display = 'block'
                }
            } else {
                time_0 = false
            }

            if (optionIndex == 1) {
                styles.changeChoiceStylesByClick(timeChoices, optionIndex)

                time_1 = true

                toolbox.hideAllSections(trendingSections)

                if (content_0) {
                    trendingSections[3].style.display = 'block'
                }

                if (content_1) {
                    trendingSections[4].style.display = 'block'
                }

                if (content_2) {
                    trendingSections[5].style.display = 'block'
                }
            } else {
                time_1 = false
            }
        })

        option.addEventListener('mouseover', function () {
            styles.changeChoiceStylesByMouseover(timeChoices, optionIndex)
        })

        option.addEventListener('mouseout', function () {
            styles.changeChoiceStylesByMouseout(timeChoices)
        })

    })
    // choose time //
    // CHOOSING THINGS //






 if (indexCard && itemId) {
    getApiDataByURL(ApiUrls.moviesNowPlaying)
        .then(data => {
            if (itemId == data.results[indexCard].id) {
                getResultsByIndexcard(data.results[indexCard], moviesByIndexCard, toolbox.formatDate)
            }
        })
        
    getApiDataByURL(ApiUrls.moviesPopular)
        .then(data => {
            if (itemId == data.results[indexCard].id) {
                getResultsByIndexcard(data.results[indexCard], moviesByIndexCard, toolbox.formatDate)
            }
        })

    getApiDataByURL(ApiUrls.moviesTopRated)
        .then(data => {
            if (itemId == data.results[indexCard].id) {
                getResultsByIndexcard(data.results[indexCard], moviesByIndexCard, toolbox.formatDate)
            }
        })

    getApiDataByURL(ApiUrls.moviesUpcoming)
        .then(data => {
            if (itemId == data.results[indexCard].id) {
                getResultsByIndexcard(data.results[indexCard], moviesByIndexCard, toolbox.formatDate)
            }
        })
}




//idt.delete(itemId)




