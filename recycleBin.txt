// GET MOVIES RESULTS //
export function getMovies(listItem, card, formatDate) {
    listItem.forEach(trendingItem => {
        const row = document.createElement('tr')
        row.classList.add('main_movies_tr')

        const imageData = document.createElement('td')
        const image = document.createElement('img')
        image.src = `${IMAGE_URL + trendingItem.poster_path}`
        imageData.appendChild(image)
        row.appendChild(imageData)

        const title = document.createElement('td')
        const titleBold = document.createElement('strong')
        titleBold.textContent = trendingItem.title
        title.appendChild(titleBold)

        const date = document.createElement('td')
        if (trendingItem.release_date == '') {
            date.textContent = ''
        } else {
            const formattedDate = formatDate(trendingItem.release_date)
            date.textContent = formattedDate
        }

        row.appendChild(title)
        row.appendChild(date)
        card.appendChild(row)
    })
}
// GET MOVIES RESULTS //

// GET SERIES RESULTS //
export function getSeries(listItem, card, formatDate) {
    listItem.forEach(trendingItem => {
        const row = document.createElement('tr')
        row.classList.add('main_series_tr')

        const imageData = document.createElement('td')
        const image = document.createElement('img')
        image.src = `${IMAGE_URL + trendingItem.poster_path}`
        imageData.appendChild(image)
        row.appendChild(imageData)

        const nameItem = document.createElement('td')
        const nameBold = document.createElement('strong')
        nameBold.textContent = trendingItem.name
        nameItem.appendChild(nameBold)

        const firstAirDate = document.createElement('td')
        if (trendingItem.first_air_date == '') {
            firstAirDate.textContent = ''
        } else {
            const formattedFirstAirDate = formatDate(trendingItem.first_air_date)
            firstAirDate.textContent = formattedFirstAirDate
        }

        row.appendChild(nameItem)
        row.appendChild(firstAirDate)
        card.appendChild(row)
    })
}
// GET SERIES RESULTS //






// choose content //
    contentOptions.forEach(function (option, optionIndex) {

        option.addEventListener('click', function () {
            if (optionIndex == 0) {
                styles.changeChoiceStylesByClick(contentChoices, optionIndex)

                content_0 = true

                toolbox.hideAllSections(trendingSections)

                if (time_0) {
                    trendingSections[0].style.display = 'block'
                }
                if (time_1) {
                    trendingSections[3].style.display = 'block'
                }
            } else {
                content_0 = false
            }

            if (optionIndex == 1) {
                styles.changeChoiceStylesByClick(contentChoices, optionIndex)

                content_1 = true

                toolbox.hideAllSections(trendingSections)

                if (time_0) {
                    trendingSections[1].style.display = 'block'
                }
                if (time_1) {
                    trendingSections[4].style.display = 'block'
                }
            } else {
                content_1 = false
            }

            if (optionIndex == 2) {
                styles.changeChoiceStylesByClick(contentChoices, optionIndex)

                content_2 = true

                toolbox.hideAllSections(trendingSections)

                if (time_0) {
                    trendingSections[2].style.display = 'block'
                }
                if (time_1) {
                    trendingSections[5].style.display = 'block'
                }
            } else {
                content_2 = false
            }
        })

        option.addEventListener('mouseover', function () {
            styles.changeChoiceStylesByMouseover(contentChoices, optionIndex)
        })

        option.addEventListener('mouseout', function () {
            styles.changeChoiceStylesByMouseout(contentChoices)
        })
        
    })
    // choose content //

    // choose time //
    timeOptions.forEach(function (option, optionIndex) {

        option.addEventListener('click', function () {
            if (optionIndex == 0) {
                styles.changeChoiceStylesByClick(timeChoices, optionIndex)

                time_0 = true

                toolbox.hideAllSections(trendingSections)

                if (content_0) {
                    trendingSections[0].style.display = 'block'
                }

                if (content_1) {
                    trendingSections[1].style.display = 'block'
                }

                if (content_2) {
                    trendingSections[2].style.display = 'block'
                }
            } else {
                time_0 = false
            }

            if (optionIndex == 1) {
                styles.changeChoiceStylesByClick(timeChoices, optionIndex)

                time_1 = true

                toolbox.hideAllSections(trendingSections)

                if (content_0) {
                    trendingSections[3].style.display = 'block'
                }

                if (content_1) {
                    trendingSections[4].style.display = 'block'
                }

                if (content_2) {
                    trendingSections[5].style.display = 'block'
                }
            } else {
                time_1 = false
            }
        })

        option.addEventListener('mouseover', function () {
            styles.changeChoiceStylesByMouseover(timeChoices, optionIndex)
        })

        option.addEventListener('mouseout', function () {
            styles.changeChoiceStylesByMouseout(timeChoices)
        })

    })
    // choose time //
    // CHOOSING THINGS //






 if (indexCard && itemId) {
    getApiDataByURL(ApiUrls.moviesNowPlaying)
        .then(data => {
            if (itemId == data.results[indexCard].id) {
                getResultsByIndexcard(data.results[indexCard], moviesByIndexCard, toolbox.formatDate)
            }
        })
        
    getApiDataByURL(ApiUrls.moviesPopular)
        .then(data => {
            if (itemId == data.results[indexCard].id) {
                getResultsByIndexcard(data.results[indexCard], moviesByIndexCard, toolbox.formatDate)
            }
        })

    getApiDataByURL(ApiUrls.moviesTopRated)
        .then(data => {
            if (itemId == data.results[indexCard].id) {
                getResultsByIndexcard(data.results[indexCard], moviesByIndexCard, toolbox.formatDate)
            }
        })

    getApiDataByURL(ApiUrls.moviesUpcoming)
        .then(data => {
            if (itemId == data.results[indexCard].id) {
                getResultsByIndexcard(data.results[indexCard], moviesByIndexCard, toolbox.formatDate)
            }
        })
}




//idt.delete(itemId)




getApiDataByURL(ApiUrls.trendingAllDay)
    .then(data => {
        if (window.location.pathname === Pathname.HTML_FOLDER + Template.INDEX_TEMPLATE) {
            getResults(data.results, trendingAllDayCard, toolbox.formatDate)
            getClickedCard(data.results, trendingAllDayCard, CardClassName.TRENDING_CLASS)
            toolbox.loadFooter()
        }
        if (indexCard && itemId) {
            if (itemId == data.results[indexCard].id) {
                itemIds.push(itemId)
                if (itemIds[0] == itemIds[1] || itemIds[0 == itemIds[2] || itemIds[0] == itemIds[3]]) {
                    itemIds = itemIds.filter(id => id !== itemId)
                }
                getResultsByIndexcard(data.results[indexCard], cards, toolbox.formatDate)
            }
        }
    })






templateRedirects(items) {
    items.forEach(function (item, index) {
        item.addEventListener('click', function () {
            if (window.location.pathname === Pathname.HTML_FOLDER + Template.INDEX_TEMPLATE) {
                if (index == 1) {
                    window.location.href = Template.MOVIES_TEMPLATE
                }
                if (index == 2) {
                    window.location.href = Template.SERIES_TEMPLATE
                }
            }
            if (window.location.pathname === Pathname.HTML_FOLDER + Template.MOVIES_TEMPLATE) {
                if (index == 0) {
                    window.location.href = Template.INDEX_TEMPLATE
                }
                if (index == 2) {
                    window.location.href = Template.SERIES_TEMPLATE
                }
            }
            if (window.location.pathname === Pathname.HTML_FOLDER + Template.SERIES_TEMPLATE) {
                if (index == 0) {
                    window.location.href = Template.INDEX_TEMPLATE
                }
                if (index == 1) {
                    window.location.href = Template.MOVIES_TEMPLATE
                }
            }
        })
    })
}





scrollToTop(button) {
    button.style.display = Display.DISPLAY_NONE

    window.addEventListener('scroll', () => {
        if (document.body.scrollTop > 890 || document.documentElement.scrollTop > 890) {
            button.disabled = false
            button.style.cursor = Cursor.POINTER_CURSOR
            setTimeout(() => {
                button.style.transition = 'opacity 0.5s ease-in-out'
                button.style.opacity = 1
            }, 500)
            button.style.display = Display.DISPLAY_BLOCK
        } else {
            button.disabled = true
            button.style.cursor = Cursor.DEFAULT_CURSOR
            setTimeout(() => {
                button.style.transition = 'opacity 0.5s ease-in-out'
                button.style.opacity = 0
            }, 500)
        }
    })

    button.addEventListener('click', () => {
        document.body.scrollTop = 0
        document.documentElement.scrollTop = 0
    })
}





let openIt = true
let closeIt = false

expandNavbarBtn.addEventListener('click', () => {
    if (openIt) {
        toolbox.displayOneThing(expandableNavbar, Display.DISPLAY_BLOCK)
        expandableNavbar.classList.remove('expandable_navbar_slide_out')
        expandableNavbar.classList.add('expandable_navbar')
        expandBtnIcon.classList.add('bi_x')
        $('.icon').removeClass('bi bi-list').addClass('bi bi-x-lg')
        openIt = false
        closeIt = true
    } else if (closeIt) {
        setTimeout(() => {
            toolbox.displayOneThing(expandableNavbar, Display.DISPLAY_NONE)
        }, 300)
        expandableNavbar.classList.remove('expandable_navbar')
        expandableNavbar.classList.add('expandable_navbar_slide_out')
        expandBtnIcon.classList.remove('bi_x')
        $('.icon').removeClass('bi bi-x-lg').addClass('bi bi-list')
        closeIt = false
        openIt = true
    }
})

window.addEventListener('scroll', () => {
    if (scrollY) {
        setTimeout(() => {
            toolbox.displayOneThing(expandableNavbar, Display.DISPLAY_NONE)
        }, 300)
        expandableNavbar.classList.remove('expandable_navbar')
        expandableNavbar.classList.add('expandable_navbar_slide_out')
        expandBtnIcon.classList.remove('bi_x')
        $('.icon').removeClass('bi bi-x-lg').addClass('bi bi-list')
        closeIt = false
        openIt = true
    }
})

document.addEventListener('keyup', (event) => {
    if (event.key === 'Escape') {
        setTimeout(() => {
            toolbox.displayOneThing(expandableNavbar, Display.DISPLAY_NONE)
        }, 300)
        expandableNavbar.classList.remove('expandable_navbar')
        expandableNavbar.classList.add('expandable_navbar_slide_out')
        expandBtnIcon.classList.remove('bi_x')
        $('.icon').removeClass('bi bi-x-lg').addClass('bi bi-list')
        closeIt = false
        openIt = true
    }
})





setGenresName(item, box, genres) {
    if (item.media_type == 'movie' || container.classList.contains(CardClassName.MOVIE_BY_INDEX)) {
        genres = genres[0]
    }

    if (item.media_type == 'tv' || container.classList.contains(CardClassName.SERIE_BY_INDEX)) {
        genres = genres[1]
    }
    
    this.api_data.getApiDataByURL(genres).then(genre_data => {
        const genres_list = genre_data.genres
        const content_genres = item.genre_ids
        
        genres_list.forEach(genre_item => {
            content_genres.forEach((content_genre, index) => {
                if (genre_item.id === content_genre) {
                    const genre_names_box = document.createElement('h3')
                    
                    if (index < content_genres.length - 1) {
                        genre_item.name = document.createTextNode(`${genre_item.name},`)
                    } else {
                        genre_item.name = document.createTextNode(genre_item.name)
                    }

                    genre_names_box.appendChild(genre_item.name)
                    box.appendChild(genre_names_box)
                }
            })
        })
    })
}





selects.forEach((select, index) => {
    let is_clicked = false

    select.addEventListener('click', () => {
        is_clicked = !is_clicked

        if (is_clicked) {
            selectContentTime[index].classList.remove('select_content_time')
            selectContentTime[index].classList.add('select_content_time_2')
        } else {
            selectContentTime[index].classList.remove('select_content_time_2')
            selectContentTime[index].classList.add('select_content_time')
        }
    })

    select.addEventListener('focusout', () => {
        is_clicked = !is_clicked
        selectContentTime[index].classList.remove('select_content_time_2')
        selectContentTime[index].classList.add('select_content_time')
    })

    window.addEventListener('scroll', () => {
        if (scrollY) {
            is_clicked = false
            selectContentTime[index].classList.remove('select_content_time_2')
            selectContentTime[index].classList.add('select_content_time')
        }
    })

    document.addEventListener('wheel', (event) => {
        if (event.deltaY) {
            is_clicked = false
            selectContentTime[index].classList.remove('select_content_time_2')
            selectContentTime[index].classList.add('select_content_time')
        }
    })
    
    document.addEventListener('keyup', (event) => {
        if (event.key === 'Escape') {
            is_clicked = !is_clicked
            selectContentTime[index].classList.remove('select_content_time_2')
            selectContentTime[index].classList.add('select_content_time')
        }
    })

})
